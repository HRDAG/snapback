snapback is short for "snapshot backups"

Why snapback not rsnapshot or rsync-snapshot (or dirvish):

   Supports many USB disk/flash drives (online and offsite): efficiently
      runs simultaneous backups (system of cheap USB drives is reliable through
      redundancy); separate logs & policies for each flexibly-named drive ...
   Any config variable can have (per-drive or per-drive-class) custom values;
      can use smaller drives (e.g. flash memory) to backup subset of system.
   Code calls hooks if they're set to functions (all defined in config file).
   When an offsite drive is returned and online, missing snapshots can be
     copied from all other drives (with minimal impact on regular backups).
   Integrated with 'snapcrypt', for easy use of encrypted, named drives.
   Easy control over backup frequency (& can exclude list of off-peak hours).
   Snapshots named by date (similar to rsync-snapshot), for transparency.
   Sophisticated pruning of old snapshots: different retention policy over the
     hours vs days vs months vs years (high -T debug_level shows how it works).
   Backup, copy, prune simultaneously (separate nice/ionice): never miss backup
      (no seek penalty with SSDs; can enforce single-writer with disk drives);
      when FS usage threshold is exceeded, pruning gets the higher priority.
   Manages rsync's "Too many links" error (admin solves by adjusting pruning);
     such errors are emailed to (per-drive) sysadmin(s).
   Built-in statistical tool to optimize filesystem inode-size and block-size.
   Efficiently uses directory and inode VFS caches, without abusing them.
   Has adaptable, comprehensive, real-time dashboard (can dump full snapshot);
      dashboard shows big swapout rates (for VFS tuning), and OS/drive errors;
      dashboard doesn't hang if any of the drives hang.
   Can safely/easily kill/suspend backup, copy, prune job, e.g. to eject drive.
   Maintains history of snapshots on each ejected drive (for offsite requests).
   Built-in regression tests to ensure reliable development.
   Written in bash ...

Why write such a serious program in bash:

   Language efficiency is irrelevant, all the time is spent in 'rsync' & 'rm'.
   Bash has needed features: lists, regular arrays, associative arrays, regex.
   Supports tracing of all commands, for deep debugging (or learning new code).
   Supports simulation, which allows trivial creation of fast regression tests.
   Supports flexible logging and debug-printing; prints a call stack on error.
   Simple support of background processes with control of session groups: jobs.
   Config file holds shell commands (eg functions, arrays, maps, computation).
   Auto-magically maintain list of config variables:
      easy/reliable validation that all config variables were set;
      per-variable customization (associative array maps drive name to value).
   Start with a simple script, evolve it into a reliable, featureful one
      (with regression-testing after each change).
