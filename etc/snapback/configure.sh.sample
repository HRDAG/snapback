# version=23

##################################################################
##################################################################
### This file and exclude.txt specify backup & prune policy.   ###
### Email requests for more variables to sweikart@gmail.com    ###
##################################################################
##################################################################
### Note: some default functions and variables in snapback can ###
### be over-ridden by defining them in here; to see which ones ###
### you can over-ride: egrep -A1 '^(have-cmd|is-set)' snapback ###
##################################################################
##################################################################

# NOTE: to illustrate how to customize a variable, the pseudo-drive_name 'X' is
# often used, so don't use 'X' yourself (unless you change it in this file :-).

renice 1 $$ &> /dev/null		# lower priority than logins

##############################################################################
# Most variables can have per-drive values (must remove -r or readonly label),
#   using either source-drive-specific-config-file (which can be modified) or
#   e.g.: drv_name2backup_period[D]=24 # D drive has Daily backups.
# $drive_class_regex (end of this file) defines a drive class: by default,
#   if drive_name 'D-2' is not a key in the drv_name2backup_period array, then
#   it checks to see if drive_class 'D' is a key (as in the previous example).
##############################################################################

# -----------------------------------------------------------------------------
# The command + options used by action 'mkfs' to create a brand new filesystem.
# -----------------------------------------------------------------------------

# --------------------------
# To understand the defaults mentioned below, search for mkfs-backup-drive
# in snapbck, and read the long comments in the following functions ...
# and also see E. in doc/Install.txt .
# --------------------------

# NOTE: XFS defaults support ~15% more snapshots than ext4 defaults.

# You'll need to add -f if the partition already has an *UNWANTED* filesystem.
# sparse=1 may hurt performance on hard disk drives (but probably not SSDs).
# sectsz=$(< /sys/block/$(basename $(readlink $dev))/queue/physical_block_size)
# Defaults: -i maxpct=0 -i size=512 -b size=4096 -n size=4096;
# Optional: -i maxpct=0 -i size=512 -b size=2048 -n size=2048, which allows
#    ~20% more snapshots than size=4096, but is disallowed in Ubuntu 18.04.
# Note that you can over-ride any of the individual defaults, but see the
# long comments near _set-opts-log_opt-mount_opts--for-xfs in snapback.
# readonly mkfs_cmd_opts="mkfs.xfs" # XFS needed if apps use many hard-links
# readonly mkfs_cmd_opts="mkfs.xfs -i size=1024" # action 'dir-sizes' suggests?

# Defaults to opts="-b 1024 -i 1024 -I 128 -m .1"; you can override them,
# but first read the long comments near _set-opts-log_opt-mount_opts--for-extN.
# Small block sizes are best, see the comment above about mkfs-backup-drive .
# Use -I 256 to backup nanosecond timestamps and/or file creation time.
# Defaults to extent-based if new-enough kernel, override with "-O ^extent".
readonly mkfs_cmd_opts="mkfs.ext4"	# typical GNU/Linux server or laptop
# readonly mkfs_cmd_opts="mkfs.ext4 -b 2048" # action 'dir-sizes' suggests?

# You probably won't need to change these.
# You could replace "noatime" with "strictatime,lazytime" .
readonly common_mount_options="nodev,nosuid,noatime"
readonly   extN_mount_options="journal_checksum" # for reliability (for ext4)
readonly    XFS_mount_options="logbsize=256k"	 # for performance

# ----------------------------------------------
# Rotational hard disks need special handling. #
# ----------------------------------------------

# This is used by set-FS_external_log(), which you can replace.
readonly FS_log_VG=			# should be fast & reliable

# Used by set-FS_external_log: should it setup an external filesystem journal?
	 do_want_external_log=$FS_log_VG # value for (RAID of) rotational disks
drv_name2do_want_external_log[X]=$false	 # value for SSD / flash memory stick
#
# The above and the below are correlated.
#
# SSDs have no seek penalty, so can run an rsync backup and deletion of pruned
# snapshots simultaneously with no I/O penalty (the priority is controlled as
# described later).  Hard disks are different, so you can change that policy.
	 is_multi_writer_drive=$false	# non-striped rotational disk drive
drv_name2is_multi_writer_drive[X]=$true	# no (or little) seek penalty

# ----------------------------------
# Variables used by nonitor-drives #
# ----------------------------------

# how long monitor-drives sleeps between checks to see if a drive responded
# msec_increment=5			# might want < 10 for SSDs

# time period over which we calculate a moving-average of drive_response
declare -i drive_response_averaging_window_msecs=2000
  drv_name2drive_response_averaging_window_msecs[X]=1000 # SSD

# -----------------------
# monitoring swapout rate
# -----------------------

# see J. in doc/Install.txt for a method to find the value of this variable
# declare -r -i max_swapout_MBps=50

# --------------------------------------------------
# Variables used by backup-drive* and prune-drive* #
# --------------------------------------------------

# We append the drive name to this variable to get the mount point.
# If change this, change comment at top of "snapback mkfs" action.
# DON'T FORGET to add this directory to PRUNEPATHS in /etc/updatedb.conf !
readonly drive_dir_prefix=/backup/

# Where send warning and error messages.
readonly sysadmin_email_addresses=

# level 0: log when create *,00 snapshot; log # pruned & also # *.rm deleted
# level 1: log every backup (plus above)
# level 2: log the new snapshots that will be pruned (plus above)
# level 3: log the deleted snapshots (plus above); misses deletions before kill
declare -i log_level=0		     # verbosity of logs in /var/log/snapback/

# ---------------------------------------------------------

# See set-job_type2priority_level to see the policy for deciding priority level
# (policy is partially controlled by $max_FS_usage_percent).

# PGIDs (PIDs of process-group leaders) will be appended to these commands;
# if that's not adequate, define a function that takes PGIDs as the final args,
# and use that function (with optional initial arguments) in each array.

[[ $is_darwin ]] &&
#https://serverfault.com/questions/100124/equivalent-of-nice-for-filesystem-io)
# reports that, on Darwin (aka macOS aka Mac OS X), you'll notice a slowdown
# from rsync unless you use a nice value of 20 (maximum niceness).
declare -r -A level2CPU_priority_cmd=(
     [lower]="renice 20 -g"
    [medium]="renice 20 -g"
    [higher]="renice 20 -g"
) ||
declare -r -A level2CPU_priority_cmd=(
     [lower]="renice 16 -g"
    [medium]="renice 15 -g"
    [higher]="renice 13 -g"
)

have-cmd ionice &&
declare -r -A level2IO_priority_cmd=(
     [lower]="ionice -c 2 -n 7 -P"
    [medium]="ionice -c 2 -n 6 -P"
    [higher]="ionice -c 2 -n 5 -P"
) ||
# replace this if you have a command to set I/O priority
declare -r -A level2IO_priority_cmd=([lower]= [medium]= [higher]=)

# --------------------------------------
# variables that control backup-drive* #
# --------------------------------------

# The directories we back up, *must* be absolute paths; can use bash globbing.
	 dirs_to_backup="/"
drv_name2dirs_to_backup[X]=/home/scott/{.bash*,bin,git} # personal memory stick
drv_name2dirs_to_backup[Z]=/var/tmp/small-dir # for testing with pseudo-drive Z

# Basic options for "rsync"; add --acls if it's supported.
# preallocate: slight ext4 speedup; hopefully works with --sparse
# preallocate error: rsync: do_fallocate <path> "Operation not supported (95)
readonly rsync_backup_opts="--archive --hard-links --xattrs --sparse --preallocate"

# See: https://stackoverflow.com/a/20738063 or "EXIT VALUES" in man page.
# Vanished source files (status=24) are common if backup tmp directories.
readonly successful_rsync_exit_statuses="0 24"
#
# We ignore SIGUSR1 or SIGINT (status=20) since partial snapshots are handled.
# Instead of logging failures for Too many links (status=31), speedup pruning.
readonly no_log_rsync_exit_statuses="20" # can add 31

# If some drives are smaller and their filesystem usage gets too high, you can
# exclude directories rather than speed-up pruning; this is better than
# changing dirs_to_backup, because run-prune will delete $extra_excludes from
# older snapshots, freeing up space.
#
# NOTE: using this variable (or dirs_to_backup) has a big disadvantage: such
# drives can't be updated from bigger drives (e.g. after a drive was off-site):
# If you keep drives off-site, it's better to use a bigger backup_period
# or faster pruning for smaller drives, which still allows for updating.
#
# After you change this variable, touch excludes.txt to alert run-prune that
# a full exclude-style prune run is needed, so new excludes delete files.
#
# Best not to customize, since that prevents use by update-drives (see above).
readonly extra_excludes=		# per-drive custom excludes

# Skip backups when there aren't many users, to avoid 'Too many links" problem.
readonly excluded_backup_hours="23 1 3"
#
# The number of hours (1, 2, 3, 4, 6, 8, 12, or 24) between cron-based backups;
# note that some backups are pruned faster unless use a power of 2 (or 24).
# A backup is *always* done at midnight, since that's the one pruning keeps.
declare -i backup_period=1		# need much RAM for small period
  drv_name2backup_period[X]=2		# if low RAM, or drive is slower
  drv_name2backup_period[X]=4		# if fast disk running big update
  drv_name2backup_period[X]=8		# if slow disk running big update
  drv_name2backup_period[X]=24		# small drive, or drive with history
  drv_name2backup_period[Z]=2		# twice the period of the mk-Z output

declare -i backup_period_for_update=0	 # default to the same
  drv_name2backup_period_for_update[X]=4 # for big update on slow disk

declare -i max_backup_period_for_pruning=0    # default to the same
  drv_name2max_backup_period_for_pruning[X]=4 # updating New disk, slow bkps

# -----------------------------------------------------------------------------
# Variables that control prune-drives.  NOTE: *backup_period, extra_excludes, #
#    and excluded_backup_hours (above) are also used in pruning.  To see the  #
#    impact of any changes, run: snapback predict-pruning [-f span] name(s)   #
# -----------------------------------------------------------------------------

# Maximum acceptable FileSystem usage (before make pruning highest priority).
declare -i max_FS_usage_percent=95	# for "df" and "df -i"

# ---------------------------------------------------------

# Dirs that contain files with massive numbers of hard-links; don't
# need to set this if using a filesystem (like XFS) that supports a zillion
# hard-links per inode.
# Don't mark this 'readonly', we clear it if the backup drive has an
# FS which supports a zillion hard-links per inode.
hard_link_dirs="/var/repos/snap*" # for HRDAG's 'snapshot' command

# The following description of how pruning works is hard to follow.
# If you prefer examples, run the command "snapback test-prune",
# then 'cd' to ${drive_dir_prefix}Z (or however you renamed Z),
# then study the 'ls -CF -d .mk-Z.*' directories and files.  For example,
# .mk-Z.hour/ holds a few weeks of hourly snapshots, and
# .mk-Z.hour.pruned.ls holds the snapshots that were left after pruning.
#
# To grok how pruning works, you can trace the code in simulation mode:
#    snapback -d -T 5 prune-drives |& less
# and study the 'prune_drive' function.

# NOTE: To see the impact of changes: snapback predict-pruning [-f span] name(s)

# Skip 'span' days of the newest snapshots, rm half the older ones; repeat this
# loop until all the oldest snapshots are only *,00 (i.e. one per day),
# which encompasses 1.5 months for an hourly 'span' of 7 days.
declare -i days_per_span_for_hour_prune=7
  drv_name2days_per_span_for_hour_prune[Z]=1	# for action test-prune
#
# At date where hour_prune rm's all but *,00, repeat algorithm for months,
# until all the oldest snapshots are only *-01,00 (i.e. one per month).
declare -i months_per_span_for_day_prune=3	# 'prune-drive -f hour' will skip
  drv_name2months_per_span_for_day_prune[Z]=1	# for action test-prune
#
# At date where the day_prune rm's all but *-01,00, repeat algorithm for years,
# until all the oldest snapshots are only *-01-01,00 (i.e. one per year).
declare -i years_per_span_for_month_prune=5	# 'prune-drive -f day' will skip
  drv_name2years_per_span_for_month_prune[Z]=1	# for action test-prune

# At date where month_prune rm's all but *-01-01,00, do algorithm for decades,
# until all the oldest snapshots are only ?0-01-01,00 (i.e. one per decade).
declare -i decades_per_span_for_year_prune=5	# 'prune-drive -f month' skips
  drv_name2decades_per_span_for_year_prune[Z]=1	# for action test-prune

# NOTE: To see the impact of changes: snapback predict-pruning [-f span] name(s)

# You can use this variable to change all 4 of the previous variables at once,
# or to scale all 4 of the previous variables for a drive of a different size.
	 pruning_span_scale_factor=1.0	  # scales previous 4 variables
drv_name2pruning_span_scale_factor[X]=1.5 # X is 50% bigger than other drives
drv_name2pruning_span_scale_factor[Z]=1	  # Z: for pruning regression test

# ----------------------------------------------------------------------------
# End of variables that control prune-drives.
# -----------------------------------------------------------------------------

# Can optionally specify often-slow drive(s) to leave out of regression tests.
flakey_drive_names_regex=

# The commands compared by the regression-test action.
readonly old_cmd=/usr/local/bin/$our_name # installed version
readonly tst_cmd=~/git/snapback/bin/$our_name # coder's version

# The regression-test action won't test update-drives unless this is defined.
# readonly update_test_args=

# -----------------------------------------------------------------------------

# Action 'check-snapshot-hard-links' uses this optional list to find the
# first (and subsequent) snapshot that has a different inode for all
# of these files (and the action will make all these files immutable).
# Include files that should exist unchanged in every single snapshot.
# [Action 'check-snapshot-hard-links' shows the snapshots that can
#  be moved into .rm/ and then deleted, to be replaced by running
#  'update-drive' and rebuilding those snapshots (with correct hard links)
#  from another backup drive that had the missing snapshots.]
readonly very_old_immutable_files=

# --------------------------------------------------------------------------
# Drive naming policy.
# --------------------------------------------------------------------------

# Set to 'T' for ISO standard, code will automagically rename snapshots.
# [Code is hard-wired to ',' ; email sweikart@gmail.com to implement variable.]
readonly snapshot_date_time_separator=','

# Default policy: drives are named as capitalized alpha strings optionally
# followed by a number.  You can set your own policy by simply changing
# the following variables (and/or by assigning functions to
# set_drive_name_pre_hook and set_drive_name_post_hook).
#
# The regex variables are extended regular expressions.
# When snapback uses the two *drive_name_regex variables, it will anchor them:
#    ^$drive_name_regex$ and ^$admin_drive_name_regex$
#
# Note that drive_name_regex is used by action 'list-drives' to generate the
# list of "all" drives for jobs whose std(in|out|err) is not a terminal
# (i.e. cron jobs and nohup jobs); admin_drive_name_regex is used when
# the sysadmin runs a command, or for the 'watch' action ('list-drives -a').
# So, when you want to do maintenance on a drive, i.e. you want to suspend
# backups and pruning, remove the drive's name from drive_name_regex= (only).
      drive_name_regex='[A-Z]'		# only drives being backed-up & pruned
admin_drive_name_regex='[A-Za-z]'	# all, for watch & list-drives -a

# This regex is matched against $drive_name to determine the drive_class,
# an alternate key for drv_name2{var} if the array has no key for $drive_name .
drive_class_regex="^."	# make the first character of $drive_name be the class
drive_class_regex="^$admin_drive_name_regex+" # Hr2 & Hr-2 use Hr customization

_drive_version_regex='[-._]?[0-9]*'	# support AB, CD-2, E.3, D_4, etc
drive_name_regex=$drive_name_regex$admin_drive_name_regex*$_drive_version_regex
admin_drive_name_regex="$admin_drive_name_regex+$_drive_version_regex"
readonly is_drive_name_capitalized=$true  # best to not change this
readonly is_drive_name_upper_cased=$false

readonly drive_name_regex admin_drive_name_regex drive_class_regex

# -----------------------------------------------------------------------------

# Emacs variables: if this doesn't work, use: M-x shell-script-mode
# Local Variables:
# mode: sh
# End:
